# managed by interlock

server {
    listen {{ .Config.Port }};
    server_name _;
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    client_max_body_size 100m;

    auth_ldap "Forbidden";
    auth_ldap_servers adop;
    
    {{ range $host := .Hosts }}
    {{ if ne $host.ContextRoot.Path "" }}
    {{ if eq $host.ContextRoot.Path "/sensu" }}
     location ~ (/sensu/|/socket.io/) {
        proxy_pass  http://ctx{{ $host.ContextRoot.Name }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;

        rewrite /sensu/(.*) /$1 break;
    }
    {{ end }}
    {{ else }}
    {{ if eq $host.ContextRoot.Path "/kibana" }}
    location /kibana/status {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }}/status;
    }

    location /app/kibana/status {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }}/status;
    }

    location ~* /app/kibana.* {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }};
    }

    location ~* /bundles/.* {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }};
    }

    location = /api/status {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }};
    }

    location ~* /elasticsearch/.* {
        proxy_pass http://ctx{{ $host.ContextRoot.Name }};
    }
    {{ end }}
    location {{ $host.ContextRoot.Path }} {
    {{ if eq $host.ContextRoot.Path "/gerrit" }}
        client_max_body_size 512m;
    {{ else if eq $host.ContextRoot.Path "/jenkins" }}
        proxy_set_header Host $host;
    {{ else if eq $host.ContextRoot.Path "/kibana" }}
        proxy_set_header Host $host;
    {{ else if eq $host.ContextRoot.Path "/sensu" }}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        rewrite /sensu/(.*) /$1 break;
    {{ else if eq $host.ContextRoot.Path "/ldap-ltb" }}
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
    {{ else if eq $host.ContextRoot.Path "/ldap-phpadmin" }}
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
    {{ end }}
	{{ if $host.ContextRootRewrite }}rewrite ^([^.]*[^/])$ $1/ permanent;
	rewrite  ^{{ $host.ContextRoot.Path }}/(.*)  /$1 break;{{ end }}
	proxy_pass http://ctx{{ $host.ContextRoot.Name }};
    }
    {{ end }}
    {{ end }}
    {{ end }}
    include /etc/nginx/sites-enabled/service-extension/*.conf;
}
{{ range $host := .Hosts }}
{{ if ne $host.ContextRoot.Path "" }}
upstream ctx{{ $host.ContextRoot.Name }} {
    {{ range $up := $host.Upstream.Servers }}server {{ $up.Addr }};
    {{ end }}
}{{ else }}
upstream {{ $host.Upstream.Name }} {
    {{ range $up := $host.Upstream.Servers }}server {{ $up.Addr }};
    {{ end }}
}
server {
    listen {{ $host.Port }};
    server_name{{ range $name := $host.ServerNames }} {{ $name }}{{ end }};
    {{ if $host.SSLOnly }}return 302 https://$server_name$request_uri;{{ else }}
    location / {
        {{ if $host.SSLBackend }}proxy_pass https://{{ $host.Upstream.Name }};{{ else }}proxy_pass http://{{ $host.Upstream.Name }};{{ end }}
    }
    {{ range $ws := $host.WebsocketEndpoints }}
    location {{ $ws }} {
        {{ if $host.SSLBackend }}proxy_pass https://{{ $host.Upstream.Name }};{{ else }}proxy_pass http://{{ $host.Upstream.Name }};{{ end }}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    {{ end }}
    {{ end }}
}
{{ if $host.SSL }}
server {
    listen {{ $host.SSLPort }};
    ssl on;
    ssl_certificate {{ $host.SSLCert }};
    ssl_certificate_key {{ $host.SSLCertKey }};
    server_name{{ range $name := $host.ServerNames }} {{ $name }}{{ end }};
    location / {
        {{ if $host.SSLBackend }}proxy_pass https://{{ $host.Upstream.Name }};{{ else }}proxy_pass http://{{ $host.Upstream.Name }};{{ end }}
    }
    {{ range $ws := $host.WebsocketEndpoints }}
    location {{ $ws }} {
        {{ if $host.SSLBackend }}proxy_pass https://{{ $host.Upstream.Name }};{{ else }}proxy_pass http://{{ $host.Upstream.Name }};{{ end }}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    {{ end }}
}
{{ end }}
{{ end }} {{/* end context root */}}
{{ end }} {{/* end host range */}}
